<?xml version="1.0" encoding="UTF-8"?>
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core">
    <p>
        The <code>colony</code> variable offers convenient access to colony-related functions from a Pipeline script.
    </p>
    <dl>
        <dt><code>colony.blueprint(spaceName, name, sandboxName, artifacts, timeout, inputs)</code></dt>
        <dd>
            <p>
                Creates a blueprint from the specified name with a specified space name, sandbox name, artifacts, timeout and user inputs.
                this blueprint object has the following methods:
                startSandbox, doInsideSandbox, endSandbox
            </p>
        </dd>
        <dt><code>sandbox = colony.blueprint(spaceName, name, sandboxName, artifacts, timeout, inputs).startSandbox()</code></dt>
        <dd>
            <p>
                Starts a sandbox under specified space name from blueprint created and returns <code>sandbox</code> json details.
                the json details can be written to json valid string using sandbox.toString()
            </p>
        </dd>
        <dt><code>colony.blueprint(spaceName, name, sandboxName, artifacts, timeout, inputs).doInsideSandbox{sandbox -> ...}</code></dt>
        <dd>
            <p>
                Starts a sandbox under specified space name and runs the delegate passing it the sandbox json details.
                when the scope of the delegate is done, ends the sandbox.
                the json details can be written to json valid string using sandbox.toString()
            </p>
        </dd>
        <dt><code>colony.endSandbox(spaceName, sandbox.id)</code></dt>
        <dd>
            <p>
                ends the sandbox under specified space name.
            </p>
        </dd>
        <dt>Sample pipeline in groovy</dt>
        <dd>
            <p>
                sandbox = colony.blueprint("SPACE_NAME", "BLUEPRINT_NAME", "SANDBOX_NAME", ArtifactDictionary, 5).startSandbox()
                echo "startSandbox returned: ${sandbox}"
                echo "sandbox.id: " + sandbox.id
                echo "sandbox.name: " + sandbox.name
                echo "sandbox.space_name: " + sandbox.space_name
                echo "sandbox.blueprint_name: " + sandbox.blueprint_name
                echo "sandbox.sandbox_status: " + sandbox.sandbox_status
                for (app in sandbox.applications) {
                    echo "app.name: " + app.name
                    echo "app.sandbox_status: " + app.sandbox_status
                }
            </p>
        </dd>
    </dl>
</j:jelly>